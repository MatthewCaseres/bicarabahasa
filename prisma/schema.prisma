// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  collections   Collection[]
  decks         Deck[]
  cards         Card[]
  userCards     UserCard[]
}

enum Role {
  USER
  CREATOR
  ADMIN
}

model Collection {
  id                String          @id @default(cuid())
  name              String
  decks             Deck[]
  createdBy         User            @relation(fields: [createdById], references: [id])
  createdById       String
  updatedAt         DateTime        @updatedAt

  @@index([createdById])
}

model Deck {
  id           String     @id @default(cuid())
  name         String
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])
  cards        Card[]
  createdBy    User       @relation(fields: [createdById], references: [id])
  createdById  String
  updatedAt    DateTime   @updatedAt

  @@index([collectionId])
  @@index([createdById])
}

// New model
model Card {
  id          String     @id @default(cuid())
  indonesian  String
  english     String
  indonesianAudioUrl String
  englishAudioUrl String
  deckId      String
  deck        Deck       @relation(fields: [deckId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
  userCards   UserCard[]

  @@index([deckId])
  @@index([createdById])
}

model UserCard {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  cardId      String
  card        Card     @relation(fields: [cardId], references: [id])
  
  // Spaced repetition fields
  interval    Int      @default(1)      // Current interval in days
  repetitions Int      @default(0)      // Number of successful reviews
  easeFactor  Float    @default(2.5)    // Ease factor, starting at 2.5
  nextReview  DateTime @default(now())   // When the card should be reviewed next
  isAgain     Boolean  @default(false)   // Whether the card should be reviewed again
  updatedAt   DateTime @updatedAt

  @@unique([userId, cardId])
  @@index([userId])
  @@index([cardId])
}
